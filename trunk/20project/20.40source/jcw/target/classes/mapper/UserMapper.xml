<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cares.baseframe.mapper.UserMapper">
	<resultMap id="BaseResultMap" type="com.cares.baseframe.bean.UserBean">
		<id column="user_id" property="userId" />
		<result column="login_name" property="loginName" />
		<result column="user_pwd" property="userPwd" />
		<result column="user_name" property="userName" />
		<result column="user_mobile" property="userMobile" />
		<result column="dept_id" property="deptId" />
		<result column="create_time" property="createTime" />
		<result column="validity" property="validity" />
		<result column="user_sex" property="userSex" />
	 	<association property="org" column ="dept_id" select = "com.cares.baseframe.mapper.OrganizationMapper.findOrganizationByDeptId"></association> 
		<association property="userRoleBeans" column ="user_id" select = "com.cares.baseframe.mapper.UserRoleMapper.findUserRoleByUserId"></association>
	</resultMap>
	<resultMap id="userVoResultMap" type="com.cares.baseframe.bean.UserVo">
		<id column="user_id" property="id" />
		<result column="login_name" property="loginName" />
		<result column="user_name" property="name" />
		<result column="user_pwd" property="password" />
		<result column="user_sex" property="sex" />
		<result column="validity" property="status" />
		<result column="dept_id" property="deptId" />
		<result column="create_time" property="createTime" />
		<result column="user_mobile" property="mobile" />
		<result column="deptName" property="deptName" />
		<collection property="rolesList" ofType="Role">
			<id column="roleId" property="roleId" />
			<result column="roleName" property="roleName" />
		</collection>
	</resultMap>
	<sql id="Base_Column_List">
		user_id, login_name,
		user_pwd,user_name,user_mobile,dept_id,create_time,validity,user_sex
	</sql>
	
	<select id="findUserByLoginName" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from s_user
		where login_name = #{username}
	</select>
	
	<select id="findUserVoById" resultMap="userVoResultMap" parameterType="java.lang.Long">
		SELECT
		t.user_id,
		t.login_name,
		t.`user_name`,
		`user_pwd`,
		user_sex,
		t.`validity`,
		t.dept_id,
		t.create_time,
		t.user_mobile,
		s.`dept_name` AS organizationName,
		o.role_id AS roleId,
		o.ROLE_NAME AS roleName
		FROM
		s_user t
		LEFT JOIN s_user_role r ON
		t.user_id = r.user_id
		LEFT JOIN
		s_role o ON r.role_id = o.role_id
		LEFT JOIN
		s_dept s ON s.dept_id=
		t.dept_id
		<where>
			t.user_id = #{id}
		</where>
	</select>
	
	<select id="queryUserByRoleId" resultMap="BaseResultMap" parameterType="java.lang.Long">
		select
		a.user_id, login_name,
		user_pwd,user_name,user_mobile,dept_id,create_time,validity,user_sex
		from s_user a join s_user_role b on a.user_id = b.user_id where b.role_id = #{id}
	</select>
	
	<select id="findUserPageCondition" resultMap="userVoResultMap" parameterType="com.cares.baseframe.bean.PageInfo">
		select t.user_id ,t.login_name,t.user_name,t.user_pwd,t.dept_id,s.dept_name as deptName,t.user_sex,t.validity,t.user_age,t.create_time,t.user_mobile from
		s_user t left join s_dept s on t.dept_id = s.dept_id
		<where>
			<if test=" condition.loginName != null and condition.loginName != '' ">
				t.login_name like CONCAT('%', #{condition.loginName}, '%')
			</if>
			<if test=" condition.userName != null and condition.userName != '' ">
				t.user_name like CONCAT('%', #{condition.userName}, '%')
			</if>
			<if test=" condition.organizationId != null ">
				and t.dept_id = #{condition.organizationId}
			</if>
			<if test="condition.startTime != null">
                <![CDATA[
            and t.create_time >= #{condition.startTime}
           ]]>
			</if>
			<if test="condition.endTime != null">
                <![CDATA[
            and t.create_time <= #{condition.endTime}
        ]]>
			</if>
			<if test=" condition.dept_id != null and condition.dept_id != '' ">
				and t.dept_id = #{condition.dept_id}
			</if>
			<if test=" condition.pid != null and condition.pid != '' ">
				and (s.dept_id = #{condition.pid} or s.dept_pid = #{condition.pid})
			</if>
		</where>
		order by ${sort} ${order}
		LIMIT #{from}, #{size}
	</select>
	<select id="findUserPageCount" resultType="java.lang.Integer" parameterType="com.cares.baseframe.bean.PageInfo">
		select count(*) count
		from s_user t left join s_dept s on t.dept_id = s.dept_id
		<where>
			<if test=" condition.name != null and condition.name != '' ">
				t.user_name like #{condition.name}
			</if>
			<if test=" condition.organizationId != null ">
				t.dept_id = #{condition.organizationId}
			</if>
			<if test="condition.startTime != null">
                <![CDATA[
            and t.create_time >= #{condition.startTime}
           ]]>
			</if>
			<if test="condition.endTime != null">
                <![CDATA[
            and t.create_time <= #{condition.endTime}
            ]]>
			</if>
			<if test=" condition.dept_id != null and condition.dept_id != '' ">
				and t.dept_id = #{condition.dept_id}
			</if>
			<if test=" condition.pid != null and condition.pid != '' ">
				and (s.dept_id = #{condition.pid} or s.dept_pid = #{condition.pid})
			</if>
		</where>
	</select>
	<insert id="insert" parameterType="com.cares.baseframe.model.User">
		<selectKey resultType="java.lang.Long" keyProperty="userId" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into s_user (login_name, user_name, user_pwd,
		user_sex, validity, dept_id,
		create_time,
		user_mobile)
		values (#{loginName}, #{userName},
		#{userPwd},#{userSex},
		#{validity}, #{deptId},
		now(),#{userMobile})
	</insert>

	<update id="updateUserPwdById">
		update s_user
		set user_pwd = #{pwd}
		where user_id = #{userId}
	</update>
	
	<update id="updateUser" parameterType="com.cares.baseframe.model.User">
    update s_user
    set login_name =#{loginName},user_name=#{userName},user_mobile=#{userMobile},dept_id=#{deptId},validity=#{validity},user_sex=#{userSex}
      <if test="userPwd != null and userPwd != ''">
        ,user_pwd = #{userPwd,jdbcType=VARCHAR} 
      </if>
    where user_id =#{userId}
  </update>
  
  <delete id="deleteById" parameterType="java.lang.Long">
		delete from s_user
		where user_id =
		#{id}
	</delete>
</mapper>